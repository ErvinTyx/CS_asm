.MODEL SMALL
.STACK 64
 PRINTSTRING MACRO STR
  MOV AH, 09H
  LEA DX,STR
  INT 21H
 ENDM
 RESETPOSITION MACRO
    MOV AH, 02H ; Set cursor position function
    MOV BH, 0   ; Page number (0 for current page)
    MOV DH, 0   ; Row (0 for top)
    MOV DL, 0   ; Column (0 for left)
    INT 10H     ; Call BIOS interrupt
ENDM
 INPUTBYTE MACRO
  MOV AH,01H
  INT 21H
 ENDM
 OUTPUTBYTE MACRO BYT
  MOV AH,02H
  MOV DL,BYT
  INT 21H
 ENDM
 NEWLINE MACRO
  MOV AH, 02H
  MOV DL, 0DH
  INT 21H
  MOV DL, 0AH
  INT 21h
 ENDM
CLS MACRO

 MOV AX, 0600H ; Scroll up window
 MOV BH, 07H   ; Page number
 MOV CX, 0     ; Upper left corner
 MOV DX, 174FH ; Number of lines to scroll
 INT 10H
ENDM

 FOURDGCAL MACRO D4 ;1234
  MOV AX,0 ;AX=0000
  MOV DX,0 ;DX=0000
 
  MOV AX,D4 ;AX=1234
  DIV HUNDRED ;AL=12 DL=34
  MOV Q1,AL ;Q1=12
  MOV R1,DL ;R1=34
 
  MOV AX,0
  MOV DX,0
  MOV AL,Q1 ;AL=12
  DIV TEN ;AL=01 AH=02
  MOV Q2,AL ;Q2=01
  MOV R2,AH ;R2=02
 
  MOV AX,0
  MOV DX,0
  MOV AL,R1 ;AL=34
  DIV TEN ;AL=03 AH=04
  MOV Q3,AL ;Q2=03
  MOV R3,AH ;R2=04
 ENDM 
.DATA
    LOGO_STORE  DB 13,10," _________  _________        ___  ________  _______    "
                DB 13,10,"|\___   ___\\___   ___\     |\  \|\   ____\|\  ___ \"
                DB 13,10,"\|___ \  \_\|___ \  \_|     \ \  \ \  \___|\ \   __/|"
                DB 13,10,"     \ \  \     \ \  \       \ \  \ \  \    \ \  \_|/__"
                DB 13,10,"      \ \  \     \ \  \       \ \  \ \  \____\ \  \_|\ \"
                DB 13,10,"       \ \__\     \ \__\       \ \__\ \_______\ \_______\"
                DB 13,10,"        \|__|      \|__|        \|__|\|_______|\|_______|"
                DB 13,10," "
                DB 13,10,"________  ________  _______   ________  _____ ______  "
                DB 13,10,"|\   ____\|\   __  \|\  ___ \ |\   __  \|\   _ \  _   \"
                DB 13,10,"\ \  \___|\ \  \|\  \ \   __/|\ \  \|\  \ \  \\\__\ \  \"
                DB 13,10," \ \  \    \ \   _  _\ \  \_|/_\ \   __  \ \  \\|__| \  \ "
                DB 13,10,"  \ \  \____\ \  \\  \\ \  \_|\ \ \  \ \  \ \  \    \ \  \"
                DB 13,10,"   \ \_______\ \__\\ _\\ \_______\ \__\ \__\ \__\    \ \__\"
                DB 13,10," $"
    MSG_SIGN_UP DB "SIGN UP"
                DB 13,10,"-----------------------------$"
    MSG_GO_CONTER DB 13,10,"=========================="
                  DB 13,10,"Proceed payment to counter"
                  DB 13,10,"==========================$"
    ADMIN_U DB "admin$",10 DUP(0)
    ADMIN_P DB "admin123$", 7 DUP(0)
    USER_U DB "USER1$",10 DUP(0);
    USER_P  DB  "USER1$",10 DUP(0);
    MSGLOG_U DB 13,10,"Enter username : $"
    MSGLOG_P DB 13,10,"Enter password : $"
    ENTERED_U DB 16 DUP(0)
    ENTERED_P DB 16 DUP(0)
    MENU_S_IN_UP    DB 13,10,"SELECT LOG IN OR SIGN UP (1/2): $"
    MSGATP  DB 13,10,"INVALID USERNAME OR PASSWORD"
            DB   13,10, "STILL HAVE $"
    MSGATP_1 DB " ATTEMPTS LEFT$"
    I_MENU_S_IN_UP DB 0
    ERROR DB 0
    JUMP DB 0
    TYPE_LOG_IN DB 0
    ATTEMPT_LOG DB 4
    ADMIN_INTERFACE_MENU    DB  13,10,"succesfully LOG IN TO ADMIN INTERFACE$"
    USER_INTERFACE_MENU     DB 13,10, "sucessfully LOG IN TO USER INTERFACE$"
    MENU_S_IN_UP_E      DB 13,10,"INVALID SYNTAX$"
    MSGE_UID_LENGTH DB 13,10,"INVALID LENGTH USERID"
                    DB 13,10,"USER ID LENGTH MUST BE AT LEAST 8 CHARACTERS$"
    MSGE_P_LENGTH    DB 13,10,"INVALID LENGTH PASSWORD"
                    DB 13,10,"PASSWORD LENGTH MUST BE AT LEAST 8 CHARACTERS$"
    MSGE_P_SC   DB 13,10,"PASSWORD MUST HAVE SPEACIAL CHARACTERS$"
    MSGE_P_UC   DB 13,10,"PASSWORD MUST HAVE UPPERCASE CHARACTERS$"
    MSGE_P_LC   DB 13,10,"PASSWORD MUST HAVE LOWERCASE CHARACTERS$"
    MSGE_P_NUM  DB 13,10,"PASSWORD MUST HAVE NUMBER$"
    ENCRYTION_TIMES DB 0
    T_ERROR DB 0
     MENU DB 13,10," ----------------------------"
      DB 13,10,"|  CODE  | FLAVOUR |  PRICE  |"
      DB 13,10,"|   D    | DURIAN  | RM 5.80 |"
      DB 13,10,"|   A    |  APPLE  | RM 4.00 |"
      DB 13,10,"|   O    | ORANGE  | RM 4.50 |"
      DB 13,10,"|   G    |  GRAPE  | RM 5.00 |"
      DB 13,10,"|   M    |  MANGO  | RM 4.50 |"
      DB 13,10, " ----------------------------$"
 MENUASK DB 13,10,13,10,"SELECT YOUR FLAVOUR (ENTER THE CODE): $"
 TAXPRICEMSG DB 13,10,"THE TAX PRICE IS : $"
 ARRAYOFPRICE DW 580,400,450,500,450
 PRICE DW 0
 QUANTITY DB 13,10,"ENTER QUANTITY (01-10): $"
 FLAVOURCODE DB 0
 QTY1 DB 0
 QTY2 DB 0
 ERROR_CF DB 13,10,"INVALID CODE!$"
 QDERROR DB 13,10,"INVALID QUANTITY RANGE! (01-10)$"
 BOOL DB "F"
 TEN DB 10
 HUNDRED DW 100
 THOUSAND DW 1000
 TOTALQTY DB 0
 TOTAL DB 0
 R1 DB 0
 R2 DB 0
 R3 DB 0
 R4 DB 0
 R5 DB 0
 Q1 DB 0
 Q2 DB 0
 Q3 DB 0
 Q4 DB 0
 Q5 DB 0
 DISPLAYPRICE DB 13,10,"ITEM PRICE: RM $"
 TOTALPRICE DW 0
 TAX DB 8
 TAXDW DW 8
 TR1 DW 0
 TR2 DB 0
 TR_3 DB 0
 TR_4 DB 0
 TQ1 DW 0
 TQ2 DB 0
 TQ3 DB 0
 TQ4 DB 0
 DTP DB 13,10,"TOTAL PRICE : RM$"
 TAXPRICE DW 0
 SALESQTY DW 0,0,0,0,0 ;SUM TOGETHER TO COMPARE WHETHER GREATER THAN 1000 (REACH THE LIMIT OF 16 BITS CALCULATIONFOR PRICE *QTY)
 CTNPURCHASE DB 13,10,"DO YOU WANT TO CONTINUE PURCHASE ? (Y/N)$"
 MSG_SIGNUP_SUCCESS DB 13,10,"-----------------------"
                    DB 13,10," SIGN UP SUCCESSFULLY "
                    DB 13,10,"----------------------$"
 CTNANSWER DB ?
 TENN DW 10
 CASH DW 0,0,0,0,0
 SEN DW 0,0,0,0,0
 CALCASH DW 0,0,0,0,0
 CALSEN DW 0,0,0,0,0
 S DB 0,0,0,0,0
 PRINTSR DB 13,10,"SALES REPORT:$"
 SR1 DB 13,10,"___________________________________________"
    DB 13,10, "| FLAVOUR | PRICE | QUANTITY | TOTAL PRICE |"
    DB 13,10, "|------------------------------------------|"
    DB 13,10, "|    D    |RM5.80 |   $"
 SR11 DB                                 "   |   $"
 SR111 DB                                              "   |$"
 SR2 DB 13,10, "|    A    |RM4.00 |   $"  
 SR22 DB                                 "   |   $"
 SR222 DB                                              "   |$"
 SR3 DB 13,10, "|    O    |RM4.50 |   $"  
 SR33 DB                                 "   |   $"
 SR333 DB                                              "   |$"
 SR4 DB 13,10, "|    G    |RM5.00 |   $"  
 SR44 DB                                 "   |   $"
 SR444 DB                                              "   |$"
 SR5 DB 13,10, "|    M    |RM4.50 |   $"  
 SR55 DB                                 "   |   $"
 SR555 DB                                              "   |$"
 SR6 DB 13,10, "|------------------------------------------|$"
 PRINTTT DB 13,10,"|                 TOTAL INCOME: $"
 PRINTTT2 DB "   |$"
 SR7 DB 13,10, "|------------------------------------------|$"
 PRINTTTAX DB 13,10,"|                  TOTAL TAXES: $"
 PRINTTTAX2 DB "     |$"
 SR8 DB 13,10, "|------------------------------------------|$"
 TOTALCASH DW 0
 TOTALSEN DW 0
 DISPLAYSEN DB 0
 DISPLAYCASH DW 0
 TEMPDATA DB 0
 CT1 DB 0
 CT2 DB 0
 CT3 DB 0
 CR_1 DB 0
 CR_2 DB 0
 CR_3 DB 0
 RETURN_FLAG DB 0
 MSG_MENU_ADMIN DB 13,10," -----------------------------"
                DB 13,10,"|  CODE  |      FUNCTION      |"
                DB 13,10,"|   1    |   SALES REPORT     |"
                DB 13,10,"|   2    |  START/STOP ORDER  |"
                DB 13,10,"|   3    | TERMINATE PROGRAM  |"
                DB 13,10,"|   4    |      LOG OUT       |"
                DB 13,10, " -----------------------------$"
 ASK_ADMINCHOICE DB 13,10,"SELECT CODE (1-4): $"
 ADMINCHOICE DB 0
 MSGE_AC DB 13,10,"INVALID! (MUST BE 1-3)$"
 MSG_PRESS_AKTC DB 13,10,"PRESS ANY KEY TO CONTIMUE...$"
 START_N_STOP_P DB 1
 MSG_PURCHASEOPEN DB 13,10,"PURCHASE NOW IS AVAILABLE!$"
 MSG_PURCHASECLOSE DB 13,10,"PURCHASE NOW IS NOT AVAILABLE!$"
 TAXCASH DW 0
 ROUNDUPTAX DB 0
 SPQUANTITY DB 0,0,0,0
 SPPRICE DB 0,0,0,0,0,0,0,0
 SPSUBPRICE DB 0,0,0,0,0,0,0
 B_VLENGTH DB 0
 B_VUC DB 0
 B_VLC DB 0
 B_VSC DB 0
 B_VNUM DB 0
 B_VALID_GE0 DB 0
 ;COLOR ANSI
 ;REFERENCE https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797
 LIGHT_AQUA 		DB 27, "[0;36m$"   	; ANSI escape sequence for Light aqua text
 RED				DB 27, "[0;31m$"	
 GREEN   			DB 27, "[0;32m$"
 YELLOW 			DB 27, "[0;33m$"
 DEFAULT_COLOR 	DB 27, "[0m$"  		; ANSI escape sequence for default colour
.CODE
MAIN PROC FAR
    MOV AX, @DATA
    MOV DS, AX
    CALL LOCK_ENCRYPTION_A
    CALL LOCK_ENCRYPTION_U
START:
    RESETPOSITION
    CLS; CLEAR SCREEN
    RESETPOSITION; RESET POSITION
    PRINTSTRING LIGHT_AQUA; SET COLOR WITHOU USING BIOS INTERUPT,USING ANSI
    PRINTSTRING LOGO_STORE
    MOV JUMP,0
    MOV ATTEMPT_LOG,4
    CMP ERROR,0
    JE PRINT1
    JNE PRINT2
PRINT2:;-- ERROR MSG
    PRINTSTRING RED
    PRINTSTRING MENU_S_IN_UP_E


PRINT1:
    PRINTSTRING DEFAULT_COLOR
    PRINTSTRING MENU_S_IN_UP

    INPUTBYTE
    MOV I_MENU_S_IN_UP,AL ; INPUT BYTE IF MENU SELECTION SIGN IN / UP
    JMP V_MENU_S_IN_UP

V_MENU_S_IN_UP:;VALIDATION FOR MENU INPUT 
    CMP I_MENU_S_IN_UP,31H
    JE E_LOGIN
    CMP I_MENU_S_IN_UP,32H
    JE SIGNUP_CONNECTION
    ;IF NOT 1 AND TWO PRINT ERROR
    MOV ERROR,1
    JNE START_CONNECTION_1

E_LOGIN: 
    MOV ERROR,0
    CALL CLEAR_UIP_PROC
    CALL GET_E_U
    CMP JUMP,1
    JE START_CONNECTION_1;IF USER PRESS ESCAPE KEY
    CALL GET_E_P
    CMP JUMP,1
    JE START_CONNECTION_1;IF USER PRESS ESCAPE KEY
    CALL ENCRYPTION_P;ENCRYPTION FOR THE DATA THAT IS INPUTTED
    CALL VALIDATION_UIDP; COMPARISON FOR THE PASSWORD AND USERID THAT HAS ENTERED IS THE SAME ANOT WITH THE ENCRYPTED PASSWORD AND USERNAME
    CMP TYPE_LOG_IN,0 ; IF TYPE 0 MEANS WRONG USERNAME OR PASSWORD, 1 ADMIN ,2 USER 
    JE INVALID_LOG;JUMP AND PROMPT INVALID MESSAGE
    CMP TYPE_LOG_IN,1
    JE ADMIN_INTERFACE;JUMP TO ADMIN INTERFACE
    CMP TYPE_LOG_IN,2
    JE USER_INTERFACE;JUMP TO USER INTERFACE

INVALID_LOG:
    DEC ATTEMPT_LOG
    CMP ATTEMPT_LOG,1
    JGE PRINT_ATTEMPT ; if GREATER THAN 1 JUMP PRINT ATTEMPT 
    JL START_CONNECTION

START_CONNECTION_1:
    JMP START
SIGNUP_CONNECTION:
    JMP SIGNUP

PRINT_ATTEMPT:
    RESETPOSITION
    CLS
    RESETPOSITION
    ; --- 
    PRINTSTRING RED; SET COLOR RED
    PRINTSTRING MSGATP
    ADD DL,30H
    OUTPUTBYTE ATTEMPT_LOG; print byte num of attempt 
    ; msg "attempts left
    PRINTSTRING MSGATP_1
    PRINTSTRING DEFAULT_COLOR
    JMP E_LOGIN ; FINISH PROMPT HOW MANY ATTEMPTS LEFT JUMP BACK TO CONTINUE USER LOG IN

ADMIN_INTERFACE:; PRINT ADMIN MENU 

    CALL ADMIN_INTERFACE_P
    ; AFTER RUN CHECK ADMIN WAN TO LOG OUT OR TERMINATE PROGRAM 
    CMP JUMP,0
    JE START_CONNECTION
    JNE END_MAIN_CONNECTION

    ;-XXXXXXXXXXXXXXXXXXXXXXX
START_CONNECTION:
    JMP START
USER_INTERFACE:
    CALL USER_INTERFACE_P
    JMP START_CONNECTION
END_MAIN_CONNECTION:
    JMP END_MAIN
SIGNUP:
    CLS
    ;CLEAR SCREEN
    RESETPOSITION
    ;RESET CURSOR
    PRINTSTRING LIGHT_AQUA
    PRINTSTRING LOGO_STORE
    NEWLINE
    PRINTSTRING DEFAULT_COLOR
    PRINTSTRING MSG_SIGN_UP
    CALL GET_E_U
    CMP JUMP,1
    JE START_CONNECTION
    CALL GET_E_P
    MOV ERROR,0
    CMP JUMP,1
    JE START_CONNECTION
    CALL ENCRYPTION_P
    CALL MOVE_UP_USER
    PRINTSTRING GREEN
    PRINTSTRING MSG_SIGNUP_SUCCESS
    PRINTSTRING DEFAULT_COLOR
    PRINTSTRING MSG_PRESS_AKTC
    MOV AH,07H
    INT 21H
    JMP START_CONNECTION
END_MAIN:
    MOV ERROR,0
    MOV AH,4CH
    INT 21H

MAIN ENDP
    GET_E_U PROC
        U_LOGIN_U:;ENTER LOGIN PAGE
        ;--- CLEAR ERROR VALIDATION FROM PREVIOUS VALIDATION FOR MENU INPUT 
            MOV ERROR,0
        ;---- PRINT MSG FOR ENTER USERNAME
            MOV AH,09H
            LEA DX,MSGLOG_U
            INT 21H
        ;---------------------------------------------------------

        L_G_E_U:;LOOPING FOR GET USER INPUT USERNAME
            MOV CX, 15
            MOV SI,0
        E_UID:;--- GET USER NAME
            MOV AH,07H
            INT 21H
            CMP AL,1BH;IF USER PRESS ESC
            JE R_G_E_U_CONNECTION ;--RETURN TO MENU SELECTION FROM LOG IN
            CMP AL,0DH ;--- IF USER PRESS ENTERED KEY
            JE E_E_U;-- ENTERED_KEY USERNAME
            CMP AL,08H; IF USER PRESS BACKSPACE
            JE I_UID_BACKSPACE ;--- INPUT USER ID BACKSPACE
            CMP AL,20H ; COMPARE WHERE IT IS IN RANGE ANOT
            JL E_UID;JMP BACK TO E_UID BELOW RANGE 20H
            CMP AL,7EH
            JG E_UID  ;JMP BACK TO E_UID GEATER RANGE 7EH
            JMP INSERT_E_UID
            R_G_E_U_CONNECTION:
                JMP R_G_E_U
            INSERT_E_UID:
            ;---- IF IN RANGE PRINT
            ;------ INSERT INTO 
            MOV ENTERED_U[SI],AL
            ;--- OUTPUT BYTE
            MOV AH,02H
            MOV DL,AL
            INT 21H
            ;---- INCREASE POSITION IN ARRAY
            INC SI
            LOOP E_UID;--- CONTINUE GET NEXT LETTER
            ;-- IF FINISH 15 CHARCTERS AUTOMATICALY ENTER STRING
        E_E_U:
            CMP I_MENU_S_IN_UP, 32H; IF IS IN SIGNUP MODE
            ;JMP TO CHECK VALIDATION
            JE SIGNUP_VALIDATION_UID
            
            JMP END_GET_E_U

        SIGNUP_VALIDATION_UID:
            CMP SI,8
            JL SIGNUP_UID_ERROR;IF STRING LENGTH IS LESS THAN 8
            JGE END_GET_E_U
        SIGNUP_UID_ERROR:
            RESETPOSITION
            ;CLEAR SCREEN
            CLS
            PRINTSTRING RED
            ;PROMRPT ERROR MSG ABOUT USER ID LENGTH MUST BE AT LEAST 8 CHARACTERS
            PRINTSTRING MSGE_UID_LENGTH
            PRINTSTRING DEFAULT_COLOR
            JMP U_LOGIN_U

        I_UID_BACKSPACE:;-- IF USER ENTER BACK SPACE
        cmp si,0
        je E_UID ; JUMP IF EQUAL TO POSITION 0
        
        ;PRINT BACK SPACE 
        MOV AH,02H
        MOV DL,08H
        INT 21H
        ;PRINT A SPACE OVER THE PREVIOUS CHAR
        MOV AH,02H
        MOV DL," "
        INT 21H
        ;PRINT BACK SPACE
        MOV AH,02H
        MOV DL,08H
        INT 21H

        DEC SI
        INC CX
        MOV ENTERED_U[SI],0
        JMP E_UID

        ;PRINT ONE BYTE TO 
        R_G_E_U:
            MOV JUMP,1; TURN THIS FLAG TO TRUE
            JMP END_GET_E_U
        END_GET_E_U:
            MOV ENTERED_U[SI],'$'
            RET
GET_E_U ENDP    
GET_E_P PROC
        U_LOGIN_P:;ENTER LOGIN PAGE
        ;--- CLEAR ERROR VALIDATION FROM PREVIOUS VALIDATION FOR MENU INPUT 
            MOV ERROR,0
            CALL CLEAR_P_PROC
        ;---- PRINT MSG FOR ENTER PASSWORD
            
            PRINTSTRING MSGLOG_P

        ;---------------------------------------------------------
        L_G_E_P:;LOOPING FOR GET USER INPUT USERNAME
            MOV CX, 15
            MOV SI,0
        E_P:;--- GET USER NAME
            MOV AH,07H
            INT 21H
            CMP AL,1BH;IF USER PRESS ESC
            JE R_G_E_P ;--RETURN TO MENU SELECTION FROM LOG IN
            CMP AL,0DH ;--- IF USER PRESS ENTERED KEY
            JE E_E_P;-- ENTERED_KEY PASSWORD
            CMP AL,08H; IF USER PRESS BACKSPACE
            JE I_P_BACKSPACE ;--- INPUT USER ID BACKSPACE
            CMP AL,20H ; COMPARE WHERE IT IS IN RANGE ANOT
            JL E_P;JMP BACK TO E_UID BELOW RANGE 20H
            CMP AL,7EH
            JG E_P  ;JMP BACK TO E_UID GEATER RANGE 7EH
            ;---- IF IN RANGE PRINT
            ;------ INSERT INTO 
            MOV ENTERED_P[SI],AL
            ;--- OUTPUT BYTE
            MOV AH,02H
            MOV DL,"*"
            INT 21H
            ;---- INCREASE POSITION IN ARRAY
            INC SI
            LOOP E_P;--- CONTINUE GET NEXT LETTER
;-----------------------------------------------------------------
        E_E_P:
            CMP I_MENU_S_IN_UP,32H;-- SIGNUP
            JNE END_GET_E_P; NOT EQUAL TO SIGN UP JMP TO 
            CALL SIGNUP_VALIDATION
            CMP T_ERROR,5
            JL U_LOGIN_P
            JE END_GET_E_P
        

        I_P_BACKSPACE:;-- IF USER ENTER BACK SPACE
            cmp si,0
            je E_P ; JUMP IF EQUAL TO POSITION 0
        
            ;PRINT BACK SPACE 
            MOV AH,02H
            MOV DL,08H
            INT 21H
            ;PRINT A SPACE OVER THE PREVIOUS CHAR
            MOV AH,02H
            MOV DL," "
            INT 21H
            ;PRINT BACK SPACE
            MOV AH,02H
            MOV DL,08H
            INT 21H

            DEC SI
            INC CX
            MOV ENTERED_P[SI],0
            JMP E_P

        R_G_E_P:;-- USER PRESS ESCAPE
            MOV JUMP,1; TURN THIS FLAG TO TRUE
            JMP END_GET_E_P
        END_GET_E_P:

            MOV ENTERED_P[SI],'$'
            ;-- IF FINISH 15 CHARCTERS AUTOMATICALY ENTER STRING
        
            RET
GET_E_P ENDP
ENCRYPTION_P PROC
        MOV ENCRYTION_TIMES,10
        ENCRYP_SL:
            MOV CX,15
            MOV SI,0
        ENCRYP_MOVP:;---- START MOVING ONE POSTISION FORWARD TO EACH BYTE
            MOV AL,ENTERED_U[SI]
            MOV AH,ENTERED_P[SI]
            XCHG ENTERED_U[SI+1],AL
            XCHG ENTERED_P[SI+1],AH
            MOV ENTERED_U[SI],AL
            MOV ENTERED_P[SI],AH
            INC SI
            MOV DI,0
        LOOP ENCRYP_MOVP
        OPEREATION_XOR:
            MOV AL,ENTERED_U[DI]
            MOV AH,ENTERED_P[DI]
            XOR AL,ENTERED_U[DI+8]
            XOR AH,ENTERED_P[DI+8]
            MOV ENTERED_U[DI],AL
            MOV ENTERED_P[DI],AH
            INC DI
            CMP DI,8
            JL OPEREATION_XOR
            CMP ENCRYTION_TIMES,0
            JG CONTINUE_ENCRY
            JE END_ENCRY_PROC
        CONTINUE_ENCRY:
            DEC ENCRYTION_TIMES
            JMP ENCRYP_SL
        END_ENCRY_PROC:
            RET      
ENCRYPTION_P ENDP
DECRYPTION_P PROC
        MOV ENCRYTION_TIMES,10
        DECRYP_SL:
            MOV CX,15
            MOV SI,15
            MOV DI,0
        OPEREATION_XOR_DECRYP:
            MOV AL,ENTERED_U[DI]
            MOV AH,ENTERED_P[DI]
            XOR AH,ENTERED_P[DI+8]
            XOR AL,ENTERED_U[DI+8]
            MOV ENTERED_U[DI],AL
            MOV ENTERED_P[DI],AH
            INC DI
            CMP DI,8
            JL OPEREATION_XOR_DECRYP
            
        DECRYP_MOVP:;---- START MOVING ONE POSTISION BACKWARD TO EACH BYTE
            MOV AL,ENTERED_U[SI]
            MOV AH,ENTERED_P[SI]
            XCHG ENTERED_U[SI-1],AL
            XCHG ENTERED_P[SI-1],AH
            MOV ENTERED_P[SI],AH
            MOV ENTERED_U[SI],AL
            DEC SI
        LOOP DECRYP_MOVP
        CMP ENCRYTION_TIMES,0
        JG CONTINUE_DECRYP
        JE END_DECRYP_PROC
        CONTINUE_DECRYP:
            DEC ENCRYTION_TIMES
            JMP DECRYP_SL
        END_DECRYP_PROC:
        RET
DECRYPTION_P ENDP   
SIGNUP_VALIDATION PROC
    ;--------------------------------------------------------------------
        SIGNUP_VALIDATION_P:
            CALL VALIDATION_P_SIGNUP
            CMP T_ERROR,5; MUST HAVE FIVE VALID
            JL PRINT_EMSG_VAL;INVALID
            JE END_SIGNUP_VALIDATION
        PRINT_EMSG_VAL:;
            CALL PROMPT_EMSG_TO
        END_SIGNUP_VALIDATION:
        RET
SIGNUP_VALIDATION ENDP
PROMPT_EMSG_TO PROC
    ;CLEAR SCRENN
    CLS
    ;RESET CURSOR
    RESETPOSITION
    PRINTSTRING RED
    CMP B_VLENGTH,1
    JE CKC_B_VLC
    JNE PRINT_E_LENGTH
    PRINT_E_LENGTH:
        PRINTSTRING MSGE_P_LENGTH
        JMP CKC_B_VLC
    CKC_B_VLC:
        CMP B_VLC,0
        JE PRINT_E_LC
        JNE CKC_B_VUC
    PRINT_E_LC:
        PRINTSTRING MSGE_P_LC
    CKC_B_VUC:
        CMP B_VUC,0
        JE PRINT_E_UC;NO UPPERCASE
        JNE CKC_B_VNUM;GOT UPPERCASE
    PRINT_E_UC:
        PRINTSTRING MSGE_P_UC
    CKC_B_VNUM:
        CMP B_VNUM,0
        JE PRINT_E_NUM;NO NUMBER
        JNE CKC_B_VSC; GOT NUMBER
    PRINT_E_NUM:
        PRINTSTRING MSGE_P_NUM
    CKC_B_VSC:
        CMP B_VSC,0
        JE PRINT_E_SC;NO SPECIAL CHAR
        JNE END_PROMPT_EMSG_TO;GOT SC
    PRINT_E_SC:
        PRINTSTRING MSGE_P_SC
    END_PROMPT_EMSG_TO:
    PRINTSTRING DEFAULT_COLOR
    RET
PROMPT_EMSG_TO ENDP
LOCK_ENCRYPTION_U PROC
        MOV ENCRYTION_TIMES,10
        ENCRYP_SL_U:
            MOV CX,15
            MOV SI,0
        ENCRYP_MOVP_U:;---- START MOVING ONE POSTISION FORWARD TO EACH BYTE
            MOV AL,USER_U[SI]
            MOV AH,USER_P[SI]
            XCHG USER_U[SI+1],AL
            XCHG USER_P[SI+1],AH
            MOV USER_U[SI],AL
            MOV USER_P[SI],AH
            INC SI
            MOV DI,0
        LOOP ENCRYP_MOVP_U
        OPEREATION_XOR_U:
            MOV AL,USER_U[DI]
            MOV AH,USER_P[DI]
            XOR AL,USER_U[DI+8]
            XOR AH,USER_P[DI+8]
            MOV USER_U[DI],AL
            MOV USER_P[DI],AH
            INC DI
            CMP DI,8
            JL OPEREATION_XOR_U
            CMP ENCRYTION_TIMES,0
            JG CONTINUE_ENCRY_U
            JE END_ENCRY_PROC_U
        CONTINUE_ENCRY_U:
            DEC ENCRYTION_TIMES
            JMP ENCRYP_SL_U
        END_ENCRY_PROC_U:
            RET      
LOCK_ENCRYPTION_U ENDP
LOCK_ENCRYPTION_A PROC
        MOV ENCRYTION_TIMES,10
        ENCRYP_SL_A:
            MOV CX,15
            MOV SI,0
        ENCRYP_MOVP_A:;---- START MOVING ONE POSTISION FORWARD TO EACH BYTE
            MOV AL,ADMIN_U[SI]
            MOV AH,ADMIN_P[SI]
            XCHG ADMIN_U[SI+1],AL
            XCHG ADMIN_P[SI+1],AH
            MOV ADMIN_U[SI],AL
            MOV ADMIN_P[SI],AH
            INC SI
            MOV DI,0
        LOOP ENCRYP_MOVP_A
        OPEREATION_XOR_A:
            MOV AL,ADMIN_U[DI]
            MOV AH,ADMIN_P[DI]
            XOR AL,ADMIN_U[DI+8]
            XOR AH,ADMIN_P[DI+8]
            MOV ADMIN_U[DI],AL
            MOV ADMIN_P[DI],AH
            INC DI
            CMP DI,8
            JL OPEREATION_XOR_A
            CMP ENCRYTION_TIMES,0
            JG CONTINUE_ENCRY_A
            JE END_ENCRY_PROC_A
        CONTINUE_ENCRY_A:
            DEC ENCRYTION_TIMES
            JMP ENCRYP_SL_A
        END_ENCRY_PROC_A:
            RET      
LOCK_ENCRYPTION_A ENDP
VALIDATION_P_SIGNUP PROC
    MOV CX,16
    MOV DI,0
    MOV B_VLENGTH,1
    MOV B_VLC,0
    MOV B_VNUM,0
    MOV B_VUC,0
    MOV B_VSC,0
    MOV T_ERROR,0
    CMP SI,8 
    ;CHECK LENGTH
        JL SIGNUP_ERROR_LENGTH
        JGE CHCK_SC_RANGE1_1
    SIGNUP_ERROR_LENGTH:
            MOV B_VLENGTH,0
            JMP CHCK_SC_RANGE1_1
    ;--------------------------------
    CHCK_SC_RANGE1_1:

        CMP ENTERED_P[DI],20H;SPECIAL_CHARACTER RANGE IS 
        JGE CHCK_SC_RANGE1_2
        JL V_END_LOOP_CONNECTION
    CHCK_SC_RANGE1_2:
        CMP ENTERED_P[DI],2FH
        JLE VALID_SC
        JG CHCK_NUM_RANGE1_1
    ;--------------------------------
    CHCK_NUM_RANGE1_1:
        CMP ENTERED_P[DI],39H
        JLE VALID_NUM
        JG CHCK_SC_RANGE2_2
    ;----------------------------------
    V_END_LOOP_CONNECTION:
     JMP V_END_LOOP
    ;-----------------------------------
    CHCK_SC_RANGE2_2:
        CMP ENTERED_P[DI],40H
        JLE VALID_SC
        JG CHCK_UPPERCASE_RANGE1_1
    ;-----------------------------------
    CHCK_UPPERCASE_RANGE1_1:
        CMP ENTERED_P[DI],5AH
        JLE VALID_UC
        JG CHCK_SC_RANGE3_1
    ;------------------------------------
    CHCK_SC_RANGE3_1:
        CMP ENTERED_P[DI],60H
        JLE VALID_SC
        JG CHCK_LOWERCASE_RANGE1_1
    ;--------------------------------------
    CHCK_LOWERCASE_RANGE1_1:
        CMP ENTERED_P[DI],7AH
        JLE VALID_LC
        JG CHCK_SC_RANGE4_1
    ;----------------------------------------
    CHCK_SC_RANGE4_1:
        CMP ENTERED_P[DI],7EH
        JLE VALID_SC
        JG V_END_LOOP
    ;-----------------------------------
    VALID_LC:
        MOV B_VLC,1
        JMP V_END_LOOP
    VALID_UC:
        MOV B_VUC,1
        JMP V_END_LOOP
    VALID_SC:
        MOV B_VSC,1
        JMP V_END_LOOP
    VALID_NUM:
        MOV B_VNUM,1
        JMP V_END_LOOP
    V_END_LOOP:
        INC DI
        DEC CX
        CMP CX,0
        JNE LOOP_AGAIN_VALIDATION
        JE OPERATION_VALID
        LOOP_AGAIN_VALIDATION:
            JMP CHCK_SC_RANGE1_1
    OPERATION_VALID:
        MOV AX,0
        ADD AL,B_VLC;GOT LOWERCASE
        ADD AL,B_VUC;GOT UPPERCASE
        ADD AL,B_VSC;GOT SPECIAL CHARACTER
        ADD AL,B_VNUM; GOT NUMBER
        ADD AL,B_VLENGTH;VALID LENGTH
        MOV T_ERROR,AL
    RET
VALIDATION_P_SIGNUP ENDP

CLEAR_UIP_PROC PROC
        L_CLEAR:;LOOPING CLEAR
            MOV CX,16;----LOOP COUNTER 16 TIMES
            MOV SI,0

        CLEAR_E:;---- CLEAR PREVIOUS USER ENTER PASSS AND UID
            MOV ENTERED_U[SI],0
            MOV ENTERED_P[SI],0
            INC SI
            LOOP CLEAR_E

            RET
CLEAR_UIP_PROC ENDP
CLEAR_P_PROC PROC; FOR PASSWORD VALIDATION
        ;LOOPING CLEAR
            MOV CX,16;----LOOP COUNTER 16 TIMES
            MOV SI,0

        CLEAR_P:;---- CLEAR PREVIOUS USER ENTER PASSS 
            MOV ENTERED_P[SI],0
            INC SI
            LOOP CLEAR_P

            RET
CLEAR_P_PROC ENDP
VALIDATION_UIDP PROC
    ;;- VALIDATION FOR PASSWORD
    V_UIDA_SL:
        MOV CX,16
        MOV SI,0
    V_UIDA:;validation for admin
        MOV AL,ENTERED_U[SI]
        CMP AL, ADMIN_U[SI]
        JNE V_UID_SL;-if not same jump to 
        INC SI
    LOOP V_UIDA
    JMP V_PA_SL
    V_PA_SL:;-- VALIDATION PASSWORD FOR ADMIN
        MOV CX,16
        MOV SI,0
        JMP V_PA
    V_PA:
        MOV AL,ENTERED_P[SI]
        CMP AL, ADMIN_P[SI]
        JNE WRONGID_OR_PASS;-if not same jump to 
        INC SI
    LOOP V_PA
    ;IF ADMIN AND PASSWORD CORRECT 
        MOV TYPE_LOG_IN,1
        JMP END_VALIDATION_UIDP

    V_UID_SL:;validation for userid start loop
        MOV CX,16
        MOV SI,0
        JMP V_UID
    V_UID:;validation for userid
        MOV AL,ENTERED_U[SI]
        CMP AL, USER_U[SI]
        JNE WRONGID_OR_PASS ;-if not same jump to 
        INC SI
    LOOP V_UID
        JMP V_UP_SL
    V_UP_SL:
        MOV CX,16
        MOV SI,0
        JMP V_UP
    V_UP:
        MOV AL,ENTERED_P[SI]
        CMP AL, USER_P[SI]
        JNE WRONGID_OR_PASS ;-if not same jump to 
        INC SI
    LOOP V_UP

    ;IF USER ID AND PASSWORD IS CORRECT
        MOV TYPE_LOG_IN,2
        JMP END_VALIDATION_UIDP
    WRONGID_OR_PASS:;IF PASSWORD IS INCORRECT
        MOV TYPE_LOG_IN,0
        JMP END_VALIDATION_UIDP
    END_VALIDATION_UIDP:
        RET
VALIDATION_UIDP ENDP
MOVE_UP_USER PROC
    MOV CX,16
    MOV SI,0
    MOVE_NEW_UIDP:
        MOV AL, ENTERED_U[SI]
        MOV USER_U[SI],AL
        MOV AL,ENTERED_P[SI]
        MOV USER_P[SI],AL
        INC SI
    LOOP MOVE_NEW_UIDP
    RET
MOVE_UP_USER ENDP
USER_INTERFACE_P PROC
    CMP START_N_STOP_P,1; CHECK WHERETHER ADMIN WAN TO TO ORDER ANOT
    JE MENUOUTPUT ; IF ADMIN WAN TO ORDER
    JMP ADMIN_DWOP

;--OUTPUT ICE-CREAM TYPES MENU
MENUOUTPUT:
    RESETPOSITION
    CLS; CLEAR SCREEN
    RESETPOSITION ;RESET POSITION
    PRINTSTRING USER_INTERFACE_MENU

 PRINTSTRING MENU

;--COMPARE TRUE FALSE STATEMENT FOR ERROR_CF MESSAGE
 CMP BOOL,"T"
 JE ERRORMSG
 JNE MENU_ASK

;--DISPLAY ERROR_CF MESSAGE
ERRORMSG:
 PRINTSTRING RED
 PRINTSTRING ERROR_CF
 PRINTSTRING DEFAULT_COLOR
 JMP MENU_ASK

MENU_ASK:
;--OUTPUT STRING FOR MENUASK
 PRINTSTRING MENUASK
 INPUTBYTE
 MOV FLAVOURCODE,AL
 JMP VALIDATION_FC; VALIDATION FOOD CODE
VALIDATION_FC:
;--COMPARE CODE
 CMP FLAVOURCODE,"a"
 JGE CHECKFCRANGE
 JL CHECKFLAVOURCODE

 CHECKFCRANGE:
 CMP FLAVOURCODE,"z"
 JG CHECKFLAVOURCODE
 JLE ADD_FLAVOURCODE

ADD_FLAVOURCODE:
 SUB FLAVOURCODE,20H

CHECKFLAVOURCODE:
 CMP FLAVOURCODE,"D"
 JE DURIAN
 CMP FLAVOURCODE,"A"
 JE APPLE
 CMP FLAVOURCODE,"O"
 JE ORANGE
 CMP FLAVOURCODE,"G"
 JE GRAPE
 CMP FLAVOURCODE,"M"
 JE MANGO
 JNE INVALID

INVALID:
 MOV BOOL,"T"
 JMP MENUOUTPUT

DURIAN:
 MOV AX,ARRAYOFPRICE[0]
 MOV PRICE,AX
 JMP QTY

APPLE:
 MOV AX,ARRAYOFPRICE[2]
 MOV PRICE,AX
 JMP QTY

ORANGE:
 MOV AX,ARRAYOFPRICE[4]
 MOV PRICE,AX
 JMP QTY

GRAPE:
 MOV AX,ARRAYOFPRICE[6]
 MOV PRICE,AX
 JMP QTY

MANGO:
 MOV AX,ARRAYOFPRICE[8]
 MOV PRICE,AX
 JMP QTY


QERROR:
 PRINTSTRING RED
 PRINTSTRING QDERROR
 PRINTSTRING DEFAULT_COLOR
 JMP QTY
QTY:
 ;--OUTPUT QUANTITY
 PRINTSTRING QUANTITY
;--ASK USER TO INPUT
 INPUTBYTE
 MOV QTY1,AL
;--ASK USER TO INPUT
 INPUTBYTE
 MOV QTY2,AL
 JMP QUANTITY_VALIDATION

QUANTITY_VALIDATION:
;--QUANTITY VALIDATION
 CMP QTY1,"0"
 JL QERROR
 JE V_QTY0_SD
 CMP QTY1,"1"
 JG QERROR
 JE V_QTY1_SD
 V_QTY1_SD:
  CMP QTY2,"0"
  JE VALID_QTY
  JNE QERROR
 V_QTY0_SD:
  CMP QTY2,"1"
  JL QERROR
  CMP QTY2,"9"
  JG QERROR
  JLE VALID_QTY
VALID_QTY:
 CALL CAL_QTY_UI
FOURDGCAL TOTALPRICE

;--9)CONVERT DEC TO HEX
 ADD Q2,30H
 ADD R2,30H
 ADD Q3,30H
 ADD R3,30H
 JMP DISPLAY_PRICE_UI

MENUOUTPUT_CONNECTION:
 JMP MENUOUTPUT
DISPLAY_PRICE_UI:
;--OUTPUT PRICE STRING
 PRINTSTRING DISPLAYPRICE

;--OUTPUT BYTE(Q2)
 OUTPUTBYTE Q2

;--OUTPUT BYTE(R2)
 OUTPUTBYTE R2

;--OUTPUT BYTE(".")
 OUTPUTBYTE "."

;--OUTPUT BYTE(Q3)
 OUTPUTBYTE Q3

;--OUTPUT BYTE(R3)
 OUTPUTBYTE R3

CALL CAL_TAXNTOTAL
 CMP RETURN_FLAG,1
 JE MENUOUTPUT_CONNECTION
 CMP RETURN_FLAG,2
 JE END_USER_INTERFACE

;ADMIN DONT WAN TO OPEN PURCHASE
ADMIN_DWOP:
    PRINTSTRING MSG_PURCHASECLOSE
    PRINTSTRING MSG_PRESS_AKTC
    INPUTBYTE
    JMP END_USER_INTERFACE
END_USER_INTERFACE:
 RET
USER_INTERFACE_P ENDP



SALESREPORT PROC
    RESETPOSITION
    CLS
    RESETPOSITION
;PRINT SALES REPORT----------------------------------------------------------------------------------------------------------------------------
 PRINTSTRING PRINTSR ;PRINT(SALES REPORT:)
;DURIAN-----------------------------------------------------------------------------
 ;PRINT(QUANTITY OF DURIAN ICE-CREAM SOLD:)
 PRINTSTRING SR1
 ;TURN SALESQTY[0] INTO BYTE TO PRINT BYTES USING DIVISION
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,SALESQTY[0] ;AX=0088
 DIV HUNDRED ;AX=0000 DX=0088
 MOV CT1,AL ;CT1=00
 MOV CR_1,DL ;CR_1=88

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,CT1 ;AL=00
 DIV TEN ;AL=00 AH=00
 MOV CT2,AL ;CT2=00
 MOV CR_2,AH ;CR_2=00

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,CR_1 ;AL=88
 DIV TEN ;AL=08 AH=08
 MOV CT3,AL ;CT3=08
 MOV CR_3,AH ;CR_3=08

;CONVERT QUANTITY FROM DEC TO HEX
 ADD CT2,30H
 ADD CR_2,30H
 ADD CT3,30H
 ADD CR_3,30H
;OUTPUT BYTE(QUANTITY)
 MOV AL,CT2
 MOV SPQUANTITY[0],AL
 MOV AL,CR_2
 MOV SPQUANTITY[1],AL
 MOV AL,CT3
 MOV SPQUANTITY[2],AL
 MOV AL,CR_3
 MOV SPQUANTITY[3],AL
 CALL PRINTQUANT_SP


;CALCULATION OF TOTAL PRICE OF DURIAN
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,ARRAYOFPRICE[0] ;AX=0580
 DIV HUNDRED ;AX=O005 DX=0080
 MOV CASH[0],AX ;CASH[0]=5
 MOV SEN[0],DX ;SEN[0]=80
 MOV AX,SALESQTY[0] ;AX=1000
 MUL CASH[0] ;AX=5*1000=5000
 MOV CALCASH[0],AX ;CALCASH[0]=5000

 ;-SEN CALCULATION
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,SEN[0] ;AX=0080
 DIV TENN ;AX=0008 DX=0000
 MOV SEN[0],AX ;SEN[0]=8
 MOV AX,SALESQTY[0] ;AX=1000
 MUL SEN[0] ;AX=8000
 MOV CALSEN[0],AX ;CALSEN[0]=8000
 DIV TENN ;AX=0800 DX=0000
 ADD AX,CALCASH[0] ;AX=800+5000=5800
 MOV CALCASH[0],AX ;CALCASH=[0]=5800
 MOV S[0],DL ;S1=0

 ;-SEPARATE VALUE IN BYTE
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,CALCASH[0] ;AX=5800
 DIV HUNDRED ; AX=0058 DX=0000
 MOV Q1,AL ;Q1=58
 MOV R1,DL ;R1=00

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,Q1 ;AL=58
 DIV TEN ;AL=05 AH=08
 MOV Q2,AL ;Q2=05
 MOV R2,AH ;R2=08

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,R1 ;AL=88
 DIV TEN ;AL=08 AH=08
 MOV Q3,AL ;Q3=08
 MOV R3,AH ;R3=08

 ;CONVERT DEC TO HEX
 ADD Q2,30H
 ADD R2,30H
 ADD Q3,30H
 ADD R3,30H
 ADD S[0],30H

 PRINTSTRING SR11 ;PRINT(, TOTAL PRICE OF DURIAN ICE-CREAM SOLD : RM)

 ;OUTPUT BYTE
 MOV AL,Q2
 MOV SPSUBPRICE[0],AL
 MOV AL,R2
 MOV SPSUBPRICE[1],AL
 MOV AL,Q3
 MOV SPSUBPRICE[2],AL
 MOV AL,R3
 MOV SPSUBPRICE[3],AL
 MOV AL,"."
 MOV SPSUBPRICE[4],AL
 MOV AL,S[0]
 MOV SPSUBPRICE[5],AL
 MOV AL,"0"
 MOV SPSUBPRICE[6],AL
 ;OUTPUTBYTE Q2
 ;OUTPUTBYTE R2
 ;OUTPUTBYTE Q3
 ;OUTPUTBYTE R3
 ;OUTPUTBYTE "."
 ;OUTPUTBYTE S[0]
 ;OUTPUTBYTE "0"
 CALL PRINTPRICE_SUBTP

 PRINTSTRING SR111

;APPLE-----------------------------------------------------------------------------
PRINTSTRING SR2 ;PRINT(QUANTITY OF APPLE ICE-CREAM SOLD:)
 ;TURN SALESQTY[0] INTO BYTE TO PRINT BYTES USING DIVISION
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,SALESQTY[2] ;AX=0099
 DIV HUNDRED ;AX=0000 DX=0099
 MOV CT1,AL ;CT1=00
 MOV CR_1,DL ;CR_1=99

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,CT1 ;AL=00
 DIV TEN ;AL=00 AH=00
 MOV CT2,AL ;CT2=00
 MOV CR_2,AH ;CR_2=00

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,CR_1 ;AL=99
 DIV TEN ;AL=09 AH=09
 MOV CT3,AL ;CT3=09
 MOV CR_3,AH ;CR_3=09

;CONVERT QUANTITY FROM DEC TO HEX
 ADD CT2,30H
 ADD CR_2,30H
 ADD CT3,30H
 ADD CR_3,30H

 ;OUTPUT BYTE(QUANTITY)
 MOV AL,CT2
 MOV SPQUANTITY[0],AL
 MOV AL,CR_2
 MOV SPQUANTITY[1],AL
 MOV AL,CT3
 MOV SPQUANTITY[2],AL
 MOV AL,CR_3
 MOV SPQUANTITY[3],AL
 CALL PRINTQUANT_SP

;CALCULATION OF TOTAL PRICE OF APPLE
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,ARRAYOFPRICE[2] ;AX=0400
 DIV HUNDRED ;AX=O004 DX=0000
 MOV CASH[2],AX ;CASH[0]=4
 MOV SEN[2],DX ;SEN[0]=00
 MOV AX,SALESQTY[2] ;AX=99
 MUL CASH[2] ;AX=99*4=396
 MOV CALCASH[2],AX ;CALCASH[0]=396

 ;-SEN CALCULATION
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,SEN[2] ;AX=0080
 DIV TEN ;AX=0008 DX=0000
 MOV SEN[2],AX ;SEN[0]=0
 MOV AX,SALESQTY[2] ;AX=1000
 MUL SEN[2] ;AX=0000
 MOV CALSEN[2],AX ;CALSEN[0]=0000
 DIV TENN ;AX=0000 DX=0000
 ADD AX,CALCASH[2] ;AX=000+0396=0396
 MOV CALCASH[2],AX ;CALCASH=[0]=0396
 MOV S[1],DL ;S1=0

 ;-SEPARATE VALUE IN BYTE
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,CALCASH[2] ;AX=0396
 DIV HUNDRED ; AX=0003 DX=0096
 MOV Q1,AL ;Q1=03
 MOV R1,DL ;R1=96

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,Q1 ;AL=03
 DIV TEN ;AL=03 AH=00
 MOV Q2,AL ;Q2=03
 MOV R2,AH ;R2=00

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,R1 ;AL=96
 DIV TEN ;AL=09 AH=06
 MOV Q3,AL ;Q3=09
 MOV R3,AH ;R3=06

 ;CONVERT DEC TO HEX
 ADD Q2,30H
 ADD R2,30H
 ADD Q3,30H
 ADD R3,30H
 ADD S[1],30H


 PRINTSTRING SR22 ;PRINT(, TOTAL PRICE OF APPLE ICE-CREAM SOLD : RM)

 ;OUTPUT BYTE
 MOV AL,Q2
 MOV SPSUBPRICE[0],AL
 MOV AL,R2
 MOV SPSUBPRICE[1],AL
 MOV AL,Q3
 MOV SPSUBPRICE[2],AL
 MOV AL,R3
 MOV SPSUBPRICE[3],AL
 MOV AL,"."
 MOV SPSUBPRICE[4],AL
 MOV AL,S[0]
 MOV SPSUBPRICE[5],AL
 MOV AL,"0"
 MOV SPSUBPRICE[6],AL
 ;OUTPUTBYTE Q2
 ;OUTPUTBYTE R2
 ;OUTPUTBYTE Q3
 ;OUTPUTBYTE R3
 ;OUTPUTBYTE "."
 ;OUTPUTBYTE S[0]
 ;OUTPUTBYTE "0"
 CALL PRINTPRICE_SUBTP

 PRINTSTRING SR222
;ORANGE-----------------------------------------------------------------------------

PRINTSTRING SR3 ;PRINT(QUANTITY OF ORANGE ICE-CREAM SOLD:)
 ;TURN SALESQTY[0] INTO BYTE TO PRINT BYTES USING DIVISION
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,SALESQTY[4] ;AX=0888
 DIV HUNDRED ;AX=0008 DX=0088
 MOV CT1,AL ;CT1=08
 MOV CR_1,DL ;CR_1=88

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,CT1 ;AL=08
 DIV TEN ;AL=08 AH=00
 MOV CT2,AL ;CT2=08
 MOV CR_2,AH ;CR_2=00

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,CR_1 ;AL=88
 DIV TEN ;AL=08 AH=08
 MOV CT3,AL ;CT3=08
 MOV CR_3,AH ;CR_3=08

;CONVERT QUANTITY FROM DEC TO HEX
 ADD CT2,30H
 ADD CR_2,30H
 ADD CT3,30H
 ADD CR_3,30H

 ;OUTPUT BYTE(QUANTITY)
 MOV AL,CT2
 MOV SPQUANTITY[0],AL
 MOV AL,CR_2
 MOV SPQUANTITY[1],AL
 MOV AL,CT3
 MOV SPQUANTITY[2],AL
 MOV AL,CR_3
 MOV SPQUANTITY[3],AL
 CALL PRINTQUANT_SP

;CALCULATION OF TOTAL PRICE OF ORANGE
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,ARRAYOFPRICE[4] ;AX=0450
 DIV HUNDRED ;AX=O004 DX=0050
 MOV CASH[4],AX ;CASH[0]=4
 MOV SEN[4],DX ;SEN[0]=50
 MOV AX,SALESQTY[4] ;AX=1000
 MUL CASH[4] ;AX=4*1000=4000
 MOV CALCASH[4],AX ;CALCASH[0]=4000

 ;-SEN CALCULATION
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,SEN[4] ;AX=0050
 DIV TEN ;AX=0005 DX=0000
 MOV SEN[4],AX ;SEN[0]=5
 MOV AX,SALESQTY[4] ;AX=1000
 MUL SEN[4] ;AX=5000
 MOV CALSEN[4],AX ;CALSEN[0]=8000
 DIV TENN ;AX=0500 DX=0000
 ADD AX,CALCASH[4] ;AX=500+5000=4500
 MOV CALCASH[4],AX ;CALCASH=[0]=4500
 MOV S[2],DL ;S1=0

 ;-SEPARATE VALUE IN BYTE
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,CALCASH[4] ;AX=4500
 DIV HUNDRED ; AX=0045 DX=0000
 MOV Q1,AL ;Q1=45
 MOV R1,DL ;R1=00

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,Q1 ;AL=45
 DIV TEN ;AL=04 AH=05
 MOV Q2,AL ;Q2=04
 MOV R2,AH ;R2=05

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,R1 ;AL=00
 DIV TEN ;AL=00 AH=00
 MOV Q3,AL ;Q3=00
 MOV R3,AH ;R3=00

 ;CONVERT DEC TO HEX
 ADD Q2,30H
 ADD R2,30H
 ADD Q3,30H
 ADD R3,30H
 ADD S[2],30H
 PRINTSTRING SR33 ;PRINT(, TOTAL PRICE OF ORANGE ICE-CREAM SOLD : RM)

 ;OUTPUT BYTE
MOV AL,Q2
 MOV SPSUBPRICE[0],AL
 MOV AL,R2
 MOV SPSUBPRICE[1],AL
 MOV AL,Q3
 MOV SPSUBPRICE[2],AL
 MOV AL,R3
 MOV SPSUBPRICE[3],AL
 MOV AL,"."
 MOV SPSUBPRICE[4],AL
 MOV AL,S[0]
 MOV SPSUBPRICE[5],AL
 MOV AL,"0"
 MOV SPSUBPRICE[6],AL
 ;OUTPUTBYTE Q2
 ;OUTPUTBYTE R2
 ;OUTPUTBYTE Q3
 ;OUTPUTBYTE R3
 ;OUTPUTBYTE "."
 ;OUTPUTBYTE S[0]
 ;OUTPUTBYTE "0"
 CALL PRINTPRICE_SUBTP
 
 PRINTSTRING SR333
;GRAPE-----------------------------------------------------------------------------

PRINTSTRING SR4 ;PRINT(QUANTITY OF GRAPE ICE-CREAM SOLD:)
 ;TURN SALESQTY[0] INTO BYTE TO PRINT BYTES USING DIVISION
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,SALESQTY[6] ;AX=0999
 DIV HUNDRED ;AX=0009 DX=0099
 MOV CT1,AL ;CT1=09
 MOV CR_1,DL ;CR_1=99

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,CT1 ;AL=09
 DIV TEN ;AL=08 AH=00
 MOV CT2,AL ;CT2=09
 MOV CR_2,AH ;CR_2=00

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,CR_1 ;AL=99
 DIV TEN ;AL=09 AH=09
 MOV CT3,AL ;CT3=09
 MOV CR_3,AH ;CR_3=09

;CONVERT QUANTITY FROM DEC TO HEX
 ADD CT2,30H
 ADD CR_2,30H
 ADD CT3,30H
 ADD CR_3,30H

 ;OUTPUT BYTE(QUANTITY)
 MOV AL,CT2
 MOV SPQUANTITY[0],AL
 MOV AL,CR_2
 MOV SPQUANTITY[1],AL
 MOV AL,CT3
 MOV SPQUANTITY[2],AL
 MOV AL,CR_3
 MOV SPQUANTITY[3],AL
 CALL PRINTQUANT_SP

;CALCULATION OF TOTAL PRICE OF GRAPE
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,ARRAYOFPRICE[6] ;AX=0500
 DIV HUNDRED ;AX=O005 DX=0000
 MOV CASH[6],AX ;CASH[0]=5
 MOV SEN[6],DX ;SEN[0]=00
 MOV AX,SALESQTY[6] ;AX=1000
 MUL CASH[6] ;AX=5*1000=5000
 MOV CALCASH[6],AX ;CALCASH[0]=5000

 ;-SEN CALCULATION
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,SEN[6] ;AX=0000
 DIV TEN ;AX=0000 DX=0000
 MOV SEN[6],AX ;SEN[0]=0
 MOV AX,SALESQTY[6] ;AX=1000
 MUL SEN[6] ;AX=0000
 MOV CALSEN[6],AX ;CALSEN[0]=0000
 DIV TENN ;AX=0000 DX=0000
 ADD AX,CALCASH[6] ;AX=0000+5000=5000
 MOV CALCASH[6],AX ;CALCASH=[0]=5000
 MOV S[3],DL ;S1=0

 ;-SEPARATE VALUE IN BYTE
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,CALCASH[6] ;AX=5000
 DIV HUNDRED ; AX=0050 DX=0000
 MOV Q1,AL ;Q1=50
 MOV R1,DL ;R1=00

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,Q1 ;AL=50
 DIV TEN ;AL=05 AH=00
 MOV Q2,AL ;Q2=05
 MOV R2,AH ;R2=00

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,R1 ;AL=00
 DIV TEN ;AL=00 AH=00
 MOV Q3,AL ;Q3=00
 MOV R3,AH ;R3=00

 ;CONVERT DEC TO HEX
 ADD Q2,30H
 ADD R2,30H
 ADD Q3,30H
 ADD R3,30H
 ADD S[3],30H

 PRINTSTRING SR44 ;PRINT(, TOTAL PRICE OF GRAPE ICE-CREAM SOLD : RM)

 ;OUTPUT BYTE
MOV AL,Q2
 MOV SPSUBPRICE[0],AL
 MOV AL,R2
 MOV SPSUBPRICE[1],AL
 MOV AL,Q3
 MOV SPSUBPRICE[2],AL
 MOV AL,R3
 MOV SPSUBPRICE[3],AL
 MOV AL,"."
 MOV SPSUBPRICE[4],AL
 MOV AL,S[0]
 MOV SPSUBPRICE[5],AL
 MOV AL,"0"
 MOV SPSUBPRICE[6],AL
 ;OUTPUTBYTE Q2
 ;OUTPUTBYTE R2
 ;OUTPUTBYTE Q3
 ;OUTPUTBYTE R3
 ;OUTPUTBYTE "."
 ;OUTPUTBYTE S[0]
 ;OUTPUTBYTE "0"
 CALL PRINTPRICE_SUBTP
 
PRINTSTRING SR444

;MANGO-----------------------------------------------------------------------------
PRINTSTRING SR5 ;PRINT(QUANTITY OF GRAPE ICE-CREAM SOLD:)
 ;TURN SALESQTY[0] INTO BYTE TO PRINT BYTES USING DIVISION
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,SALESQTY[8] ;AX=1000
 DIV HUNDRED ;AX=0010 DX=0000
 MOV CT1,AL ;CT1=10
 MOV CR_1,DL ;CR_1=00

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,CT1 ;AL=10
 DIV TEN ;AL=01 AH=00
 MOV CT2,AL ;CT2=01
 MOV CR_2,AH ;CR_2=00

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,CR_1 ;AL=00
 DIV TEN ;AL=00 AH=00
 MOV CT3,AL ;CT3=00
 MOV CR_3,AH ;CR_3=00

;CONVERT QUANTITY FROM DEC TO HEX
 ADD CT2,30H
 ADD CR_2,30H
 ADD CT3,30H
 ADD CR_3,30H

 ;OUTPUT BYTE(QUANTITY)
 MOV AL,CT2
 MOV SPQUANTITY[0],AL
 MOV AL,CR_2
 MOV SPQUANTITY[1],AL
 MOV AL,CT3
 MOV SPQUANTITY[2],AL
 MOV AL,CR_3
 MOV SPQUANTITY[3],AL
 CALL PRINTQUANT_SP

;CALCULATION OF TOTAL PRICE OF MANGO
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,ARRAYOFPRICE[8] ;AX=0450
 DIV HUNDRED ;AX=O004 DX=0050
 MOV CASH[8],AX ;CASH[8]=4
 MOV SEN[8],DX ;SEN[8]=50
 MOV AX,SALESQTY[8] ;AX=1000
 MUL CASH[8] ;AX=4*1000=4000
 MOV CALCASH[8],AX ;CALCASH[8]=4000

 ;-SEN CALCULATION
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,SEN[8] ;AX=0050
 DIV TEN ;AX=0005 DX=0000
 MOV SEN[8],AX ;SEN[0]=5
 MOV AX,SALESQTY[8] ;AX=1000
 MUL SEN[8] ;AX=5000
 MOV CALSEN[8],AX ;CALSEN[0]=5000
 DIV TENN ;AX=0500 DX=0000
 ADD AX,CALCASH[8] ;AX=0500+4000=4500
 MOV CALCASH[8],AX ;CALCASH=[0]=4500
 MOV S[4],DL ;S1=0

 ;-SEPARATE VALUE IN BYTE
 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AX,CALCASH[8] ;AX=4500
 DIV HUNDRED ; AX=0045 DX=0000
 MOV Q1,AL ;Q1=45
 MOV R1,DL ;R1=00

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,Q1 ;AL=45
 DIV TEN ;AL=04 AH=05
 MOV Q2,AL ;Q2=04
 MOV R2,AH ;R2=05

 MOV AX,0 ;AX=0000
 MOV DX,0 ;DX=0000
 MOV AL,R1 ;AL=00
 DIV TEN ;AL=00 AH=00
 MOV Q3,AL ;Q3=00
 MOV R3,AH ;R3=00

 ;CONVERT DEC TO HEX
 ADD Q2,30H
 ADD R2,30H
 ADD Q3,30H
 ADD R3,30H
 ADD S[4],30H
 
 PRINTSTRING SR55 ;PRINT(, TOTAL PRICE OF MANGO ICE-CREAM SOLD : RM)

 ;OUTPUT BYTE
 MOV AL,Q2
 MOV SPSUBPRICE[0],AL
 MOV AL,R2
 MOV SPSUBPRICE[1],AL
 MOV AL,Q3
 MOV SPSUBPRICE[2],AL
 MOV AL,R3
 MOV SPSUBPRICE[3],AL
 MOV AL,"."
 MOV SPSUBPRICE[4],AL
 MOV AL,S[0]
 MOV SPSUBPRICE[5],AL
 MOV AL,"0"
 MOV SPSUBPRICE[6],AL
 ;OUTPUTBYTE Q2
 ;OUTPUTBYTE R2
 ;OUTPUTBYTE Q3
 ;OUTPUTBYTE R3
 ;OUTPUTBYTE "."
 ;OUTPUTBYTE S[0]
 ;OUTPUTBYTE "0"
 CALL PRINTPRICE_SUBTP
 
 PRINTSTRING SR555
 PRINTSTRING SR6

;-------------TOTAL------------------------------------------------------------------------------------------------------------------------
 MOV AL,S[0]
 SUB AL,30H
 MOV S[0],AL
 MOV AL,S[1];CORRRECT DY U CHECK NOW MISSING JN U MENTION 
 SUB AL,30H
 MOV S[1],AL
 MOV AL,S[2]
 SUB AL,30H
 MOV S[2],AL
 MOV AL,S[3]
 SUB AL,30H
 MOV S[3],AL
 MOV AL,S[4]
 SUB AL,30H; HERE MISSING 3 JN 0H
 MOV S[4],AL

 ;-DISPLAY SEN CALCULATION
 MOV AX,0
 MOV DX,0
 MOV AL,S[0]
 ADD AL,S[1]
 ADD AL,S[2]
 ADD AL,S[3]
 ADD AL,S[4]
 DIV TEN ;EXP: AL=05 AH=06
 MOV DISPLAYSEN,AH ;DISPLAYSEN=6
 MOV AH,0
 MOV TEMPDATA,AL

 ;DISPLAY CASH CALCULATION
 MOV AX,0
 ADD AL,TEMPDATA
 ADD AX,CALCASH[0]
 ADD AX,CALCASH[2]
 ADD AX,CALCASH[4]
 ADD AX,CALCASH[6]
 ADD AX,CALCASH[8]
 MOV DISPLAYCASH,AX

  ;CONVERT DISPLAYCASH INTO BYTES FOR OUTPUT PURPOSE USING DIVISION
  MOV AX,0
  MOV DX,0
  MOV AX,DISPLAYCASH ;EXP:12345
  DIV HUNDRED ;AX=0123 DX=0045
  MOV TQ1,AX ;TQ1=123
  MOV TR1,DX ;R1=45
;
  MOV AX,0
  MOV DX,0
  MOV AX,TQ1 ;AX=0123
  DIV HUNDRED ;AX=0001 DX=0023
  MOV Q2,AL ;Q2=1 -------------------------
  MOV R2,DL ;R2=23
;
  MOV AX,0
  MOV DX,0
  MOV AL,R2 ;AL=23
  DIV TEN ;AL=02 AH=03
  MOV Q3,AL ;Q3=02 -------------------------
  MOV R3,AH ;R3=03 -------------------------
;
  MOV AX,0
  MOV DX,0
  MOV AX,TR1 ;AL=45
  DIV TENN ;AX=0004 DX=0005
  MOV Q4,AL ;Q4=04 -------------------------
  MOV R4,DL ;R4=05 -------------------------
  
  ;CONVERT DEC TO HEX
  MOV AX,0
  MOV DX,0
  ADD Q2,30H
  ADD Q3,30H
  ADD R3,30H
  ADD Q4,30H
  ADD R4,30H
  ADD DISPLAYSEN,30H
;
  PRINTSTRING PRINTTT ;OUTPUT TOTAL INCOME

  MOV AL,Q2
  MOV SPPRICE[0],AL
  MOV AL,Q3
  MOV SPPRICE[1],AL
  MOV AL,R3
  MOV SPPRICE[2],AL
  MOV AL,Q4
  MOV SPPRICE[3],AL
  MOV AL,R4
  MOV SPPRICE[4],AL
  MOV AL,"."
  MOV SPPRICE[5],AL
  MOV AL,DISPLAYSEN
  MOV SPPRICE[6],AL
  MOV AL,"0"
  MOV SPPRICE[7],AL
  CALL PRINTPRICE_SP

  ;OUTPUTBYTE Q2
  ;OUTPUTBYTE Q3
  ;OUTPUTBYTE R3
  ;OUTPUTBYTE Q4
  ;OUTPUTBYTE R4
  ;OUTPUTBYTE "."
  ;OUTPUTBYTE DISPLAYSEN
  ;OUTPUTBYTE "0"
  PRINTSTRING PRINTTT2
  PRINTSTRING SR7

;-----------------------------------------------------TOTAL TAXES---------------------------------------------------------------------------
 ;EXP:999*5.8(DURIAN)=5794.2
 ;SEN OF TOTAL TAX CALCULATION
 MOV AX,0
 MOV DX,0
 MOV AL,DISPLAYSEN ;AX=0002
 MUL TAXDW ;2*8=16
 DIV HUNDRED ;16/100 AL=0,AH=16/AX=1600
 DIV THOUSAND ;1600/1000 AX=0001 DX=0600
 MOV ROUNDUPTAX,AL

 ;CASH OF TOTAL TAX CALCULATION
 MOV AX,0
 MOV DX,0
 MOV AX,DISPLAYCASH ;AX=5794
 MUL TAXDW ;5794*8-46352
 DIV HUNDRED ;46352/100 AX=0463 DX=0052
 MOV TQ1,AX ;TQ1=463
 MOV R1,DL ;R1=52

 MOV AX,0
 MOV DX,0
 MOV AX,TQ1 ;AX=0463
 DIV HUNDRED ;AX=0004 DX=0063
 MOV Q2,AL ;Q2=4 --------------------
 MOV R2,DL ;R2=63

 MOV AX,0
 MOV DX,0
 MOV AL,R2 ;AL=63
 DIV TEN ;AL=06 AH=03
 MOV Q3,AL ;Q3=6 --------------------
 MOV R3,AH ;R3=3 --------------------

 MOV AX,0
 MOV DX,0
 MOV AL,R1 ;AL=52
 DIV TEN ;AL=05 AH=02
 MOV Q4,AL ;Q3=5 --------------------
 MOV R4,AH ;R3=2 --------------------
 
 ;ADD WITH SEN ROUNDUP
 MOV AL,R4 ;AL=2
 ADD AL,ROUNDUPTAX ;2+1=3
 MOV R4,AL

 ;COMPARE R4 CHECK WHETHER TO ROUNDUP OR NOT
 CMP R4,4
 JG ROUNDUPTAXCAL
 JLE CONVERTTAX

ROUNDUPTAXCAL:
 MOV AL,Q4
 ADD AL,1
 MOV Q4,AL

 ;CONVERT TAX FROM DEC TO HEX
CONVERTTAX:
 ADD Q2,30H
 ADD Q3,30H
 ADD R3,30H
 ADD Q4,30H

 ;OUTPUT TOTAL TAX
 PRINTSTRING PRINTTTAX
 OUTPUTBYTE Q2
 OUTPUTBYTE Q3
 OUTPUTBYTE R3
 OUTPUTBYTE "."
 OUTPUTBYTE Q4
 OUTPUTBYTE "0"
 PRINTSTRING PRINTTTAX2
 PRINTSTRING SR8



 RET
SALESREPORT ENDP
CAL_QTY_UI PROC
;--CLEAR AX
 MOV AX,0
CALCULATION:
;--1)CONVERT HEX TO DEC
 SUB QTY1,30H ; QTY1 = 1
 SUB QTY2,30H; QYT2 = 0

;--2)MULTIPLY 10 WITH TEN-PLACE
 MOV AL,QTY1 ; AL = 1
 MUL TEN ; AL = 1 *10 = 10

;--3)MOVE TO REGISTER,THEN TEN-PLACE PLUS WITH ONE-PLACE,THEN MOVE BACK
 ADD AL,QTY2 ; ; AL = 10+ 0 = 10
 MOV TOTALQTY,AL ; TOTALQTY = AL = 10

;--4)MUTIPLY AS WITH PRICE AND STORE AX TO TOTALPRICE
 MUL PRICE
 MOV TOTALPRICE,AX

     RET
CAL_QTY_UI ENDP
CAL_TAXNTOTAL PROC
     MOV RETURN_FLAG,0
     ;--CALCULATE TAX PRICE
;--1)MOVE TOTALPRICE TO AX, CALCULATE THE TAX PRICE AND AUTOMATICALLY MOVE QUOTIENT TO AX AND REMAINDER TO DX
 MOV AX,0
 MOV DX,0
 MOV AL,TAX
 MUL TOTALPRICE
 MOV TAXPRICE,AX
 DIV THOUSAND
 MOV TQ1,AX ;46 41
 MOV TR1,DX ;400 760

 MOV AX,0
 MOV DX,0
 MOV AX,TQ1 ;46 41
 DIV TEN    ;04 04
 MOV TQ2,AL ;04 04 
 MOV TR2,AH ;06 01

 MOV AX,0
 MOV DX,0
 
 MOV AX,TR1 ;400 760
 DIV HUNDRED ;AL = 04 07
 MOV TQ3,AL ;AL = 04 07
 MOV TR_3,DL ;DL = 00 60

 MOV AX,0
 MOV DX,0
 MOV AL,TR_3 ;00 60
 DIV TEN    ;0 06
 MOV TQ4,AL ;0 06
 MOV TR_4,AH ;0 00
 
;MOVE TQ3 TO BL TO COMPARE FOR ROUND UP
 MOV BL,TQ3

;--2)CONVERT DEC TO HEX
 ADD TQ2,30H
 ADD TQ3,30H
 ADD TQ4,30H
 ADD TR2,30H

;--3)OUTPUT TAX PRICE
 PRINTSTRING TAXPRICEMSG
 OUTPUTBYTE TQ2
 OUTPUTBYTE "."
 OUTPUTBYTE TR2
 OUTPUTBYTE TQ3
 OUTPUTBYTE TQ4
 
;--CHECK WHETHER HAVE VALUE SMALLER THAN 0.01, IF GREATER THAN OR EQUAL TO 5 PLUS 0.01
 MOV AX,0
 MOV DX,0
 CMP BL,5
 JL CALTOTAL
 MOV AX,TAXPRICE
 ADD AX,THOUSAND ;TYX SUBSTRACTION
 MOV TAXPRICE,AX

CALTOTAL: ;46400,5800
 MOV AX,0
 MOV DX,0
 MOV AX,TAXPRICE ;46400 41760
 DIV HUNDRED ;0464 0417
 ADD AX,TOTALPRICE ;AX=464+5800=6264 AX=417+5220
 MOV DX,0 ;---------------------------------TO BE CONTINUE
 DIV HUNDRED ; 62.64 5637
 MOV Q1,AL ;62 56
 MOV R1,DL ;64 37

;--7)MOVE Q1 TO AL, THEN DIV TEN,MOVE QUOTIENT AND REMAINDER RESPECTIVELY TO Q2 AND R2
 MOV AX,0
 MOV DX,0
 MOV AL,Q1 ;AL=62 56
 DIV TEN ;06 05
 MOV Q2,AL ;6 05
 MOV R2,AH ;2 06

;--8)MOVE Q2 TO AL,THEN DIV TEN, MOVE QUOTIENT AND REMAINDER RESPECTIVELY TO Q3 AND R3
 MOV AX,0
 MOV DX,0
 MOV AL,R1 ;AL=64
 DIV TEN ;6.4
 MOV Q3,AL ;6
 MOV R3,AH ;4

;--9)CONVERT DEC TO HEX
 ADD Q2,30H
 ADD R2,30H
 ADD Q3,30H
 ADD R3,30H

;--OUTPUT TOTAL PRICE
 PRINTSTRING DTP

 ;--OUTPUT BYTE(Q2)
 OUTPUTBYTE Q2

;--OUTPUT BYTE(R2)
 OUTPUTBYTE R2

;--OUTPUT BYTE(".")
 OUTPUTBYTE "."

;--OUTPUT BYTE(Q3)
 OUTPUTBYTE Q3

 ;OUTPUTBYTE R3
 OUTPUTBYTE "0"
 PRINTSTRING GREEN
 PRINTSTRING MSG_GO_CONTER
 PRINTSTRING DEFAULT_COLOR
 ;COMPARE FLAVOUR CODE TO ADD QUANTITY FOR SALES REPORT
 MOV AX,0
 CMP FLAVOURCODE,"D"
 JE ADDQTYD
 CMP FLAVOURCODE,"A"
 JE ADDQTYA
 CMP FLAVOURCODE,"O"
 JE ADDQTYO
 CMP FLAVOURCODE,"G"
 JE ADDQTYG
 CMP FLAVOURCODE,"M"
 JE ADDQTYM

;ADD QUANTITY TO SALES QUANTITY FOR SALES REPORT DISPLAY PURPOSE
ADDQTYD:
 MOV AL,TOTALQTY
 ADD SALESQTY[0],AX
 JMP CTNP
ADDQTYA:
 MOV AL,TOTALQTY
 ADD SALESQTY[2],AX
 JMP CTNP
ADDQTYO:
 MOV AL,TOTALQTY
 ADD SALESQTY[4],AX
 JMP CTNP
ADDQTYG:
 MOV AL,TOTALQTY
 ADD SALESQTY[6],AX
 JMP CTNP
ADDQTYM:
 MOV AL,TOTALQTY
 ADD SALESQTY[8],AX
 JMP CTNP

;OUTPUT INVALID MESSAGE
ERRORYN:
 PRINTSTRING RED
 PRINTSTRING ERROR_CF
 PRINTSTRING DEFAULT_COLOR

;ASK FOR WHETHER CONTINUE PURCHASE
CTNP:
 ;OUTPUT CONTINUE PURCHASE 
 PRINTSTRING CTNPURCHASE
 INPUTBYTE
 MOV CTNANSWER,AL
 CMP CTNANSWER,"y"
 JE CONTINUE_TO_MENU
 CMP CTNANSWER,"Y"
 JE CONTINUE_TO_MENU
 CMP CTNANSWER,"n"
 JE EXIT2_LOGIN_PAGE
 CMP CTNANSWER,"N"
 JE EXIT2_LOGIN_PAGE;--- CHANGE TO LOGIN
 JNE ERRORYN
 CONTINUE_TO_MENU:
     MOV RETURN_FLAG,1
     JMP END_CAL_TAXNTOTAL 
 EXIT2_LOGIN_PAGE:
     MOV RETURN_FLAG,2
     JMP END_CAL_TAXNTOTAL
 END_CAL_TAXNTOTAL:
     RET
CAL_TAXNTOTAL ENDP
ADMIN_INTERFACE_P PROC
    MOV ERROR,0
    
    PRINTSTRING ADMIN_INTERFACE_MENU
ADMIN_START:
        ;XXXXXXXXXXXXXXXXXXXXXXXX
    RESETPOSITION
    ;CLEAR SCREEN
    CLS
    ;RESET CURSOR
    RESETPOSITION
    PRINTSTRING MSG_MENU_ADMIN ;OUTPUT ADMIN MENU
    CMP ERROR,0
    JE GET_ACM
    PRINTSTRING MSGE_AC ;OUTPUT ADMIN CHOICE ERROR MESSAGE
    JMP GET_ACM
GET_ACM:; GET ADMIN CHOICE MENU
    
    PRINTSTRING ASK_ADMINCHOICE
    INPUTBYTE ;LET ADMIN TO INPUTBYTE
    MOV ADMINCHOICE,AL ;MOVE INPUT TO ADMINCHOICE
    JMP VALIDATEADMINCHOICE

    VALIDATEADMINCHOICE: ;ADMIN CHOICE VALIDATION
        CMP ADMINCHOICE,"1"
        JL ACERROR
        JE AC_1
        CMP ADMINCHOICE,"3"
        JE AC_3
        CMP ADMINCHOICE,"2"
        JE AC_2
        CMP ADMINCHOICE,"4"
        JE AC_4
    ACERROR:
        MOV ERROR,1
        JMP ADMIN_START
    
    AC_1: ;SALES REPORT
        MOV ERROR,0
        CALL SALESREPORT ;CALL SALESREPORT FUNCTION
        NEWLINE
        PRINTSTRING MSG_PRESS_AKTC ;PRINT(PRESS ANY KEY TO CONTINUE...)
        INPUTBYTE ;LET ADMIN PRESS ANY KEY TO CONTINUE
        JMP ADMIN_START

    AC_2: ;START/STOP ORDER'
        CALL AC_2_P
        JMP ADMIN_START

    AC_3:
        MOV ERROR,0
        MOV JUMP,1;TERMINATED PROGRAM
        JMP AC_END
    AC_4:
        MOV ERROR,0
        MOV JUMP,0
        JMP AC_END

    AC_END:

        RET
ADMIN_INTERFACE_P ENDP
AC_2_P PROC
    MOV ERROR,0
    CMP START_N_STOP_P,1
    JE CHANGE_SNS1
    CMP START_N_STOP_P,0
    JE CHANGE_SNS0
    CHANGE_SNS1:
        MOV START_N_STOP_P,0
        PRINTSTRING MSG_PURCHASECLOSE
        PRINTSTRING MSG_PRESS_AKTC
        INPUTBYTE
        JMP END_AC_2_P
    CHANGE_SNS0:
        MOV START_N_STOP_P,1
        PRINTSTRING MSG_PURCHASEOPEN
        PRINTSTRING MSG_PRESS_AKTC
        INPUTBYTE
        JMP END_AC_2_P
    END_AC_2_P:
    RET
AC_2_P ENDP
PRINTQUANT_SP PROC
    MOV SI,0
    MOV B_VALID_GE0,0
    ; WHILE LOOP 
    PRINTSP_QUANT:
        CMP B_VALID_GE0,0; IF B_VALID_GE0
        JE CKCGE0;if false
        JG PRINTNUM_QTY ;else
        CKCGE0:
            CMP SPQUANTITY[SI],30H;check more than 0
            JE PRINT_SPACE
            JG PRINT_NUMSALESQTY

            PRINT_SPACE:
                OUTPUTBYTE " "
                JMP END_PRINTQUANT_SP_LOOP

            PRINT_NUMSALESQTY:
                MOV AL,SPQUANTITY[SI]
                OUTPUTBYTE AL
                MOV B_VALID_GE0,1
                JMP END_PRINTQUANT_SP_LOOP
            
        PRINTNUM_QTY:
                MOV AL,SPQUANTITY[SI]
                OUTPUTBYTE AL
                JMP END_PRINTQUANT_SP_LOOP
            END_PRINTQUANT_SP_LOOP:
                INC SI
                CMP SI,2
                JLE PRINTSP_QUANT

        MOV AL,SPQUANTITY[SI]
        OUTPUTBYTE AL
    RET    
            
PRINTQUANT_SP ENDP


PRINTPRICE_SP PROC
    MOV SI,0
    MOV B_VALID_GE0,0
    ; WHILE LOOP 
    PRINTSP_PRICE:
        CMP B_VALID_GE0,0; IF B_VALID_GE0
        JE CKCPRICE;if false
        JG PRINTNUM_PRICE ;else
        CKCPRICE:
            CMP SPPRICE[SI],30H;check more than 0
            JE PRINT_SPACEPRICE
            JG PRINT_NUMSALESPRICE

            PRINT_SPACEPRICE:
                OUTPUTBYTE " "
                JMP END_PRINTPRICE_SP_LOOP

            PRINT_NUMSALESPRICE:
                MOV AL,SPPRICE[SI]
                OUTPUTBYTE AL
                MOV B_VALID_GE0,1
                JMP END_PRINTPRICE_SP_LOOP
            
        PRINTNUM_PRICE:
                MOV AL,SPPRICE[SI]
                OUTPUTBYTE AL
                JMP END_PRINTPRICE_SP_LOOP
            END_PRINTPRICE_SP_LOOP:
                INC SI
                CMP SI,3
                JLE PRINTSP_PRICE

        MOV AL,SPPRICE[SI]
        OUTPUTBYTE AL
        INC SI
        MOV AL,SPPRICE[SI]
        OUTPUTBYTE AL
        INC SI
        MOV AL,SPPRICE[SI]
        OUTPUTBYTE AL
        INC SI
        MOV AL,SPPRICE[SI]
        OUTPUTBYTE AL
    RET
PRINTPRICE_SP ENDP

PRINTPRICE_SUBTP PROC
    MOV SI,0
    MOV B_VALID_GE0,0
    ; WHILE LOOP 
    PRINTSP_SUBPRICE:
        CMP B_VALID_GE0,0; IF B_VALID_GE0
        JE CKCSUBPRICE;if false
        JG PRINTNUM_SUBPRICE ;else
        CKCSUBPRICE:
            CMP SPSUBPRICE[SI],30H;check more than 0
            JE PRINT_SPACESUBPRICE
            JG PRINT_NUMSALESSUBPRICE

            PRINT_SPACESUBPRICE:
                OUTPUTBYTE " "
                JMP END_PRINTSUBPRICE_SP_LOOP

            PRINT_NUMSALESSUBPRICE:
                MOV AL,SPSUBPRICE[SI]
                OUTPUTBYTE AL
                MOV B_VALID_GE0,1
                JMP END_PRINTSUBPRICE_SP_LOOP
            
        PRINTNUM_SUBPRICE:
                MOV AL,SPSUBPRICE[SI]
                OUTPUTBYTE AL
                JMP END_PRINTSUBPRICE_SP_LOOP
            END_PRINTSUBPRICE_SP_LOOP:
                INC SI
                CMP SI,2
                JLE PRINTSP_SUBPRICE

        MOV AL,SPSUBPRICE[SI]
        OUTPUTBYTE AL
        INC SI
        MOV AL,SPSUBPRICE[SI]
        OUTPUTBYTE AL
        INC SI
        MOV AL,SPSUBPRICE[SI]
        OUTPUTBYTE AL
        INC SI
        MOV AL,SPSUBPRICE[SI]
        OUTPUTBYTE AL
    RET
PRINTPRICE_SUBTP ENDP


;meow
    
    END MAIN